<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.CodeAnalysis.CSharp.EditorFeatures</name>
    </assembly>
    <members>
        <member name="T:Microsoft.CodeAnalysis.Editor.CSharp.AutomaticCompletion.AutomaticLineEnderCommandHandler">
            <summary>
            csharp automatic line ender command handler
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.AutomaticCompletion.AutomaticLineEnderCommandHandler.WrapInType(System.String)">
            <summary>
            wrap field in type
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.AutomaticCompletion.AutomaticLineEnderCommandHandler.CheckLocation(Microsoft.CodeAnalysis.Text.SourceText,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            make sure current location is okay to put semicolon
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.AutomaticCompletion.AutomaticLineEnderCommandHandler.TryGetLastToken(Microsoft.CodeAnalysis.Text.SourceText,System.Int32,Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.SyntaxToken@)">
            <summary>
            get last token of the given using/field/statement/expression bodied member if one exists
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.AutomaticCompletion.AutomaticLineEnderCommandHandler.LocatedAtTheEndOfLine(Microsoft.CodeAnalysis.Text.TextLine,Microsoft.CodeAnalysis.SyntaxToken)">
            <summary>
            check whether the line is located at the end of the line
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.AutomaticCompletion.AutomaticLineEnderCommandHandler.GetOwningNodes(Microsoft.CodeAnalysis.SyntaxNode,System.Int32)">
            <summary>
            find owning usings/field/statement/expression-bodied member of the given position
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Editor.CSharp.ContentType.ContentTypeDefinitions.CSharpContentTypeDefinition">
            <summary>
            Definition of the primary C# content type.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.CSharp.CSharpEditorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CSharp.CSharpEditorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CSharp.CSharpEditorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CSharp.CSharpEditorResources.PressTABToInsert">
            <summary>
              Looks up a localized string similar to      (Press TAB to insert).
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CSharp.CSharpEditorResources.Properties">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.Editor.CSharp.CSharpEditorResources.SmartIndenting">
            <summary>
              Looks up a localized string similar to Smart Indenting.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.CSharp.EventHookup.EventHookupCommandHandler">
            <summary>
            Ignores commands until '=' is pressed, at which point we determine if the '=' is part of a
            "+=" that is used to attach an event handler to an event. Once we determine that it is a
            "+=" attaching an event handler to an event, we show a UI that tells the user they can hit
            tab to generate a handler method. 
            
            Once we receive the '=' we watch all actions within the buffer. Anything (including use of 
            directional arrows) other than a typed space removes the UI or cancels any background
            computation.
            
            The determination of whether the "+=" is being used to attach an event handler to an event
            can be costly, so it operates on a background thread. After the '=' of a "+=" is typed,
            only a tab will cause the UI thread to block while it determines whether we should 
            intercept the tab and generate an event handler or just let the tab through to other 
            handlers.
            
            Because we are explicitly asking the user to tab, so we should handle the tab command before
            Automatic Completion.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.CSharp.EventHookup.EventHookupQuickInfoSourceProvider">
            <summary>
            Order after "squiggle" so that we have the opportunity to remove any quick info content
            added due to errors in the code (which happen right after "eventName +=")
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.EventHookup.EventHookupSessionManager.TextBuffer_Changed(System.Object,Microsoft.VisualStudio.Text.TextContentChangedEventArgs)">
            <summary>
            If any text is deleted or any non-space text is entered, cancel the session.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.EventHookup.EventHookupSessionManager.Caret_PositionChanged(System.Object,System.EventArgs)">
            <summary>
            If the caret moves outside the session's tracking span, cancel the session.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.CSharp.EventHookup.EventHookupSessionManager.EventHookupSession">
            <summary>
            A session begins when an '=' is typed after a '+' and requires determining whether the
            += is being used to add an event handler to an event. If it is, then we also determine 
            a candidate name for the event handler.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.EventHookup.EventHookupSessionManager.EventHookupSession.GetNameObjectPart(Microsoft.CodeAnalysis.IEventSymbol,Microsoft.CodeAnalysis.SyntaxToken,Microsoft.CodeAnalysis.SemanticModel,Microsoft.CodeAnalysis.LanguageServices.ISyntaxFactsService)">
            <summary>
            Take another look at the LHS of the += node -- we need to figure out a default name
            for the event handler, and that's usually based on the object (which is usually a
            field of 'this', but not always) to which the event belongs. So, if the event is 
            something like 'button1.Click' or 'this.listBox1.Select', we want the names 
            'button1' and 'listBox1' respectively. If the field belongs to 'this', then we use
            the name of this class, as we do if we can't make any sense out of the parse tree.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.KeywordHighlighting.KeywordHighlighters.LoopHighlighter.HighlightRelatedKeywords(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextSpan},System.Boolean,System.Boolean)">
            <summary>
            Finds all breaks and continues that are a child of this node, and adds the appropriate spans to the spans list.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.KeywordHighlighting.KeywordHighlighters.ReturnStatementHighlighter.HighlightRelatedKeywords(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Finds all returns that are children of this node, and adds the appropriate spans to the spans list.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.KeywordHighlighting.KeywordHighlighters.SwitchStatementHighlighter.HighlightRelatedKeywords(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Finds all breaks and continues that are a child of this node, and adds the appropriate spans to the spans
            list.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.KeywordHighlighting.KeywordHighlighters.YieldStatementHighlighter.HighlightRelatedKeywords(Microsoft.CodeAnalysis.SyntaxNode,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Finds all returns that are children of this node, and adds the appropriate spans to the spans list.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.LineSeparator.CSharpLineSeparatorService.GetLineSeparatorsAsync(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Text.TextSpan,System.Threading.CancellationToken)">
            <summary>
            Given a tree returns line separator spans.
            The operation may take fairly long time on a big tree so it is cancellable.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.LineSeparator.CSharpLineSeparatorService.IsSeparableBlock(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>Node types that are interesting for line separation.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.LineSeparator.CSharpLineSeparatorService.IsSeparableContainer(Microsoft.CodeAnalysis.SyntaxNode)">
            <summary>Node types that may contain separable blocks.</summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.LineSeparator.CSharpLineSeparatorService.ProcessNodeList``1(Microsoft.CodeAnalysis.SyntaxList{``0},System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextSpan},System.Threading.CancellationToken)">
            <summary>
            If node is separable and not the last in its container => add line separator after the node
            If node is separable and not the first in its container => ensure separator before the node
            last separable node in Program needs separator after it.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.NavigationBar.CSharpNavigationBarItemService.AddFieldSpan(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.SyntaxTree,System.Collections.Generic.List{Microsoft.CodeAnalysis.Text.TextSpan})">
            <summary>
            Computes a span for a given field symbol, expanding to the outer 
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.Outlining.MetadataAsSource.AbstractMetadataAsSourceOutliner`1.GetHintTextEndToken(`0)">
            <summary>
            Returns the last token to be included in the regions hint text.
            </summary>
            <remarks>
            Note that the text of this token is included in the hint text, but not its
            trailing trivia. See also <seealso cref="M:Microsoft.CodeAnalysis.Editor.CSharp.Outlining.MetadataAsSource.AbstractMetadataAsSourceOutliner`1.GetEndToken(`0)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Editor.CSharp.Outlining.MetadataAsSource.AbstractMetadataAsSourceOutliner`1.GetEndToken(`0)">
            <summary>
            Returns the token that marks the end of the collapsible region for the given node.
            </summary>
            <remarks>
            Note that the text of the returned token is *not* included in the region, but any
            leading trivia will be. This allows us to put the banner text for the collapsed
            region immediately before the type or member.
            See also <seealso cref="M:Microsoft.CodeAnalysis.Editor.CSharp.Outlining.MetadataAsSource.AbstractMetadataAsSourceOutliner`1.GetHintTextEndToken(`0)"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.CSharp.SignatureHelp.ElementAccessExpressionSignatureHelpProvider.IncompleteElementAccessExpression">
            Error tolerance case for
                "foo[$$]" or "foo?[$$]"
            which is parsed as an ArrayTypeSyntax variable declaration instead of an ElementAccessExpression  
        </member>
        <member name="T:Microsoft.CodeAnalysis.Editor.CSharp.SignatureHelp.ElementAccessExpressionSignatureHelpProvider.ConditionalAccessExpression">
            Error tolerance case for
                "new String()?[$$]"
            which is parsed as a BracketedArgumentListSyntax parented by an ElementBindingExpressionSyntax parented by a ConditionalAccessExpressionSyntax
        </member>
    </members>
</doc>
