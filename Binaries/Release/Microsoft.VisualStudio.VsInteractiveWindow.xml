<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.VsInteractiveWindow</name>
    </assembly>
    <members>
        <member name="T:Roslyn.VisualStudio.Setup.ProvideRoslynBindingRedirectionAttribute">
            <summary>
            A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute"/> that provides binding redirects with all of the Roslyn settings we need.
            It's just a wrapper for <see cref="T:Microsoft.VisualStudio.Shell.ProvideBindingRedirectionAttribute"/> that sets all the defaults rather than duplicating them.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.InteractiveWindow.Shell.InteractiveWindowPackage">
             <summary>
             This is the class that implements the package exposed by this assembly.
            
             The minimum requirement for a class to be considered a valid package for Visual Studio
             is to implement the IVsPackage interface and register itself with the shell.
             This package uses the helper classes defined inside the Managed Package Framework (MPF)
             to do it: it derives from the Package class that provides the implementation of the 
             IVsPackage interface and uses the registration attributes defined in the framework to 
             register itself and its components with the shell.
             </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.InteractiveWindow.Shell.IVsInteractiveWindow">
            <summary>
            Provides access to an interactive window being hosted inside of Visual Studio's process using the
            default tool window.
            
            These tool windows are created using ProvideInteractiveWindowAttribute which provides the normal
            tool window registration options.  Instances of the tool window are then created using 
            IVsInteractiveWindowFactory when VS calls on your packages IVsToolWindowFactory.CreateToolWindow
            method.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.InteractiveWindow.Shell.IVsInteractiveWindow.InteractiveWindow">
            <summary>
            Gets the interactive window instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.InteractiveWindow.Shell.IVsInteractiveWindow.Show(System.Boolean)">
            <summary>
            Shows the window.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.InteractiveWindow.Shell.IVsInteractiveWindow.SetLanguage(System.Guid,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Configures the window for the specified VS language service guid language preferences.
            
            Also installs a language appropriate command filter if one is exported via IVsInteractiveWindowOleCommandTargetProvider.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.InteractiveWindow.Shell.IVsInteractiveWindowOleCommandTargetProvider">
            <summary>
            The implementer is given a chance to attach a command filter that routes language services
            commands into the Interactive Window command filter chain.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute">
            <summary>
            This attribute declares that a package own an interactive window.  Visual Studio uses this 
            information to handle the positioning and persistence of your window. The attributes on a 
            package do not control the behavior of the package, but they can be used by registration 
            tools to register the proper information with Visual Studio.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute.Style">
            <summary>
            Default DockStyle for the ToolWindow
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute.DockedWidth">
            <summary>
            Default width of the ToolWindow when docked
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute.DockedHeight">
            <summary>
            Default height of the ToolWindow when docked
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute.Orientation">
            <summary>
            Default Orientation for the ToolWindow, relative to the window specified by the Window Property
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute.Window">
            <summary>
            Default Window that the ToolWindow will be docked with
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute.DocumentLikeTool">
            <summary>
            Set to true if you want a tool window that behaves and has a lifetime like a document.
            The tool window will only be MDI or floating and will remain visible in its position across all layout changes
            until manually closed by the user at which point it will be destroyed.  
            This flag implies DontForceCreate and destructive multi instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Called to register this attribute with the given context.  The context
            contains the location where the registration information should be placed.
            it also contains such as the type being registered, and path information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.InteractiveWindow.Shell.ProvideInteractiveWindowAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
            <summary>
            Unregister this Tool Window.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.InteractiveWindow.Shell.VsInteractiveWindow">
            <summary>
            Default tool window for hosting interactive windows inside of Visual Studio.  This hooks up support for
            find in windows, forwarding commands down to the text view adapter, and providing access for setting
            VS specific concepts (such as language service GUIDs) for the interactive window.
            
            Interactive windows can also be hosted outside of this tool window if the user creates an IInteractiveWindow
            directly.  In that case the user is responsible for doing what this class does themselves.  But the
            interactive window will be properly initialized for running inside of Visual Studio's process by our 
            VsInteractiveWindowEditorsFactoryService which handles all of the mapping of VS commands to API calls
            on the interactive window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.InteractiveWindow.Shell.VsInteractiveWindow.Content">
            <summary>
            This property returns the control that should be hosted in the Tool Window. It can be
            either a FrameworkElement (for easy creation of tool windows hosting WPF content), or it
            can be an object implementing one of the IVsUIWPFElement or IVsUIWin32Element
            interfaces.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VSInteractiveWindowResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VSInteractiveWindowResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VSInteractiveWindowResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
